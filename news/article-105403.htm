<!doctype html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://clashxv2ray.github.io/news/article-105403.htm" />
    <meta charset="utf-8">
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <title>NET Core 操作达梦数据库DM8的两种方式</title>
        <meta name="description" content="某个项目需要实现基础软件全部国产化，其中操作系统指定银河麒麟，数据库使用达梦V8，CPU平台的范围包括x64、龙芯、飞腾、鲲鹏等。考虑到这些基础产品对.NET的支持，最终选择了.NET Core 3." />
        <link rel="icon" href="/assets/website/img/clashxv2ray/favicon.ico" type="image/x-icon"/>
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <meta name="author" content="Clash-X V2ray免费订阅地址官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://clashxv2ray.github.io/news/article-105403.htm" />
    <meta property="og:site_name" content="Clash-X V2ray免费订阅地址官网" />
    <meta property="og:title" content="NET Core 操作达梦数据库DM8的两种方式" />
    <meta property="og:image" content="https://clashxv2ray.github.io/uploads/20250131/08cb283e1aeee19e85ed9791d49a29cd.webp" />
        <meta property="og:release_date" content="2025-04-27T08:27:13" />
    <meta property="og:updated_time" content="2025-04-27T08:27:13" />
        <meta property="og:description" content="某个项目需要实现基础软件全部国产化，其中操作系统指定银河麒麟，数据库使用达梦V8，CPU平台的范围包括x64、龙芯、飞腾、鲲鹏等。考虑到这些基础产品对.NET的支持，最终选择了.NET Core 3." />
    
    <!-- Place favicon.ico in the root directory -->
    <link rel="preconnect" href="https://fonts.googleapis.com/">
    <link rel="preconnect" href="https://fonts.gstatic.com/" crossorigin="">

    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="NET Core 操作达梦数据库DM8的两种方式">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">

    <link href="/assets/website/css/clashxv2ray/css2-Sofia_swap.css" rel="stylesheet">
    <!-- CSS here -->
    <link rel="stylesheet" href="/assets/website/css/clashxv2ray/bootstrap.min.css">
    <link rel="stylesheet" href="/assets/website/css/clashxv2ray/animate.min.css">
    <link rel="stylesheet" href="/assets/website/css/clashxv2ray/swiper.min.css">
    <link rel="stylesheet" href="/assets/website/css/clashxv2ray/magnific-popup.css">
    <link rel="stylesheet" href="/assets/website/css/clashxv2ray/fontawesome-pro.css">
    <link rel="stylesheet" href="/assets/website/css/clashxv2ray/spacing.css">
    <link rel="stylesheet" href="/assets/website/css/clashxv2ray/custom-font.css">
    <link rel="stylesheet" href="/assets/website/css/clashxv2ray/main.css">
    <link rel="stylesheet" href="/assets/website/css/G.css" />
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-G4Y8M6RNBF"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-G4Y8M6RNBF');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">

    <!-- preloader start -->
    <div id="preloader">
        <div class="preloader-close">x</div>
        <div class="sk-three-bounce">
            <div class="sk-child sk-bounce1"></div>
            <div class="sk-child sk-bounce2"></div>
            <div class="sk-child sk-bounce3"></div>
        </div>
    </div>
    <!-- preloader start -->
    <!-- Backtotop start -->
    <div class="backtotop-wrap cursor-pointer">
        <svg class="backtotop-circle svg-content" width="100%" height="100%" viewbox="-1 -1 102 102">
            <path d="M50,1 a49,49 0 0,1 0,98 a49,49 0 0,1 0,-98"></path>
        </svg>
    </div>
    <!-- Backtotop end -->
    <!-- Offcanvas area start -->
    <div class="fix">
        <div class="offcanvas__area">
            <div class="offcanvas__wrapper">
                <div class="offcanvas__content">
                    <div class="offcanvas__top d-flex justify-content-between align-items-center">
                        <div class="offcanvas__logo">
                            <a href="/" class="xcblog-blog-logo">
                                <span>ClashX V2ray</span>
                            </a>
                        </div>
                        <div class="offcanvas__close">
                            <button class="offcanvas-close-icon animation--flip">
                                <span class="offcanvas-m-lines">
                                    <span class="offcanvas-m-line line--1"></span><span class="offcanvas-m-line line--2"></span><span class="offcanvas-m-line line--3"></span>
                                </span>
                            </button>
                        </div>
                    </div>
                    <div class="mobile-menu fix"></div>
                    
                </div>
            </div>
        </div>
    </div>
    <div class="offcanvas__overlay"></div>
    <div class="offcanvas__overlay-white"></div>
    <!-- Offcanvas area start -->
    <!-- Header area start -->
    <header>
        <div id="header-sticky" class="header__area header-1">
            <div class="container">
                <div class="mega__menu-wrapper p-relative">
                    <div class="header__main">
                        <div class="header__left">
                            <div class="header__logo">
                                <div class="logo">
                                    <a href="/" class="xcblog-blog-logo">
                                                                                <span>ClashX V2ray</span>
                                                                            </a>
                                </div>
                            </div>
                        </div>
                        <div class="header__middle">
                            <div class="mean__menu-wrapper d-none d-lg-block">
                                <div class="main-menu">
                                    <nav id="mobile-menu">
                                        <ul>
                                                                                        <li>
                                                <a href="/">首页</a>
                                            </li>
                                                                                        <li>
                                                <a href="/free-nodes/">免费节点</a>
                                            </li>
                                                                                        <li>
                                                <a href="/paid-subscribe/">推荐机场</a>
                                            </li>
                                                                                        <li>
                                                <a href="/client.htm">客户端</a>
                                            </li>
                                                                                        <li>
                                                <a href="/news/">新闻资讯</a>
                                            </li>
                                                                                    </ul>
                                    </nav>
                                </div>
                            </div>
                        </div>
                        <div class="header__right">
                            <div class="header__action d-flex align-items-center">
                                <div class="header__hamburger ml-20 d-lg-none">
                                    <div class="sidebar__toggle">
                                        <button class="bar-icon">
                                            <span></span>
                                            <span></span>
                                            <span></span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </header>

    <!-- Header area end -->

<div id="popup-search-box">
    <div class="box-inner-wrap d-flex align-items-center">
        <form id="form" action="#" method="get" role="search">
            <input id="popup-search" type="text" name="s" placeholder="Type keywords here...">
        </form>
        <div class="search-close"><i class="fa-sharp fa-regular fa-xmark"></i></div>
    </div>
</div>
<!-- Header area end -->

<!-- Body main wrapper start -->
<main>

    <div class="breadcrumb__area breadcrumb-space overflow-hidden banner-home-bg ">
        <div class="banner-home__middel-shape inner-top-shape"></div>
        <div class="container">
            <div class="banner-all-shape-wrapper">
                <div class="banner-home__banner-shape-1 first-shape">
                    <img class="upDown-top" src="/assets/website/img/clashxv2ray/banner-shape-1.svg" alt="img not found">
                </div>
                <div class="banner-home__banner-shape-2 second-shape">
                    <img class="upDown-bottom" src="/assets/website/img/clashxv2ray/banner-shape-2.svg" alt="img not found">
                </div>
                <div class="right-shape">
                    <img class="zooming" src="/assets/website/img/clashxv2ray/inner-right-shape.svg" alt="img not found">
                </div>
            </div>
            <div class="row align-items-center justify-content-between">
                <div class="col-12">
                    <div class="breadcrumb__content text-center">
                        <div class="breadcrumb__title-wrapper mb-15 mb-sm-10 mb-xs-5">
                            <h1 class="breadcrumb__title color-white">NET Core 操作达梦数据库DM8的两种方式</h1>
                        </div>
                        <div class="breadcrumb__menu" data-wow-delay=".5s">
                            <nav>
                                <ul>
                                    <li><span><a href="/">首页</a></span></li>
                                    <li><span><a href="/news/">新闻资讯</a></span></li>
                                    <li class="active"><span>正文</span></li>
                                </ul>
                            </nav>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

        <!--latest Choose Us start-->
        <section class="latest-Choose-us__area section-space overflow-hidden latest-Choose-bg">
            <div class="container p-relative z-index-1">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="Clash Node官网订阅站" data-url="https://clashnode.github.io">
                <div class="xcblog-blog-detail xcblog-blog-detail-defined">
                      				  				  				</h1> <p>某个项目需要实现基础软件全部国产化，其中操作系统指定银河麒麟，数据库使用达梦V8，CPU平台的范围包括x64、龙芯、飞腾、鲲鹏等。考虑到这些基础产品对.NET的支持，最终选择了.NET Core 3.1。</p> </h1> <ul> <li>CPU平台：x86-64 / Arm64</li> <li>操作系统：银河麒麟 v4</li> <li>数据库：DM8</li> <li>.NET：.NET Core 3.1</li> </ul> </h1> <p>达梦自己提供了.NET操作其数据库的SDK，可以通过NuGet安装，也可以通过安装达梦数据库获取。因为NuGet上的版本不知道是谁提供的，所以这里以安装数据库获取相关SDK为例。</p> <p>在官网下载DM8的数据库安装文件：https://www.dameng.com/list_103.html</p> <p>下载前需要先登录，随便注册一个帐号就好了。</p> <p>这里需要选择CPU和操作系统，按照你的开发环境选择即可，下载后按照提示安装。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/ac35bdb0cbc858e8b6bfe32cfee65c7c.jpg" alt="NET Core 操作达梦数据库DM8的两种方式"></p> <p>这里以Windows10为例，安装后SDK文件的位置在：C:\dmdbms\drivers\dotNet</p> <p>这里边有EF的SDK，也有NHibernate的SDK，不过这篇文章只使用最基础的基于ADO.NET的SDK。</p> <p>这些SDK在文件夹DmProvider下边，这里还提供了一个Nuget包，可以放到自己的Nuget仓库中，方便内部安装。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/6fa57cc3bf77a64c8e63d4502f19acc0.jpg" alt="NET Core 操作达梦数据库DM8的两种方式"></p> <p>可以看到，这个SDK可以支持.NET Core2.0以上的所有.NET版本。</p> </h1> <p>这里提供两种方式：传统的DbHelperSQL方式 和 Dapper 方式。</p> <h2 id="dbhelpersql方式">DbHelperSQL方式</h2> <p>这种方式早年用的比较多，现在还有很多项目在使用，通过定义一组工具方法包装对数据库的各种增删改查操作。下面给出代码：</p> <pre><code class="language-cs">    public class DmDbClient     {         private string connectionString = string.Empty;          /// &lt;summary&gt;         /// 初始化DMClient的一个新实例         /// &lt;/summary&gt;         /// &lt;param name="str"&gt;&lt;/param&gt;         public DmDbClient(string str)         {             connectionString = str;         }          #region 通用快捷方法         /// &lt;summary&gt;         /// 执行一条SQL语句，确定记录是否存在         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;SQL查询语句&lt;/param&gt;         /// &lt;returns&gt;&lt;/returns&gt;         public bool Exists(string sql)         {             object obj = GetSingle(sql);              int cmdresult;             if (Equals(obj, null) || Equals(obj, DBNull.Value))             {                 cmdresult = 0;             }             else             {                 cmdresult = int.Parse(obj.ToString());             }              return cmdresult &gt; 0;         }          /// &lt;summary&gt;         /// 执行一条SQL语句，确定记录是否存在         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;SQL查询语句&lt;/param&gt;         /// &lt;returns&gt;&lt;/returns&gt;         public async Task&lt;bool&gt; ExistsAsync(string sql)         {             object obj = await GetSingleAsync(sql);              int cmdresult;             if (Equals(obj, null) || Equals(obj, DBNull.Value))             {                 cmdresult = 0;             }             else             {                 cmdresult = int.Parse(obj.ToString());             }              return cmdresult &gt; 0;         }          /// &lt;summary&gt;         /// 执行一条SQL语句，确定记录是否存在         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;SQL查询语句&lt;/param&gt;         /// &lt;param name="paras"&gt;SQL参数数组&lt;/param&gt;         /// &lt;returns&gt;&lt;/returns&gt;         public bool Exists(string sql, params DmParameter[] paras)         {             object obj = GetSingle(sql, paras);              int cmdresult;             if ((object.Equals(obj, null)) || (object.Equals(obj, DBNull.Value)))             {                 cmdresult = 0;             }             else             {                 cmdresult = int.Parse(obj.ToString());             }              return cmdresult &gt; 0;         }          /// &lt;summary&gt;         /// 执行一条SQL语句，确定记录是否存在         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;SQL查询语句&lt;/param&gt;         /// &lt;param name="paras"&gt;SQL参数数组&lt;/param&gt;         /// &lt;returns&gt;&lt;/returns&gt;         public async Task&lt;bool&gt; ExistsAsync(string sql, params DmParameter[] paras)         {             object obj = await GetSingleAsync(sql, paras);              int cmdresult;             if ((object.Equals(obj, null)) || (object.Equals(obj, DBNull.Value)))             {                 cmdresult = 0;             }             else             {                 cmdresult = int.Parse(obj.ToString());             }              return cmdresult &gt; 0;         }          /// &lt;summary&gt;         /// 获取记录条数         /// &lt;/summary&gt;         /// &lt;param name="tableName"&gt;表名&lt;/param&gt;         /// &lt;param name="sqlCondition"&gt;查询条件&lt;/param&gt;         /// &lt;returns&gt;&lt;/returns&gt;         public int GetCount(string tableName, string sqlCondition)         {             string sql = "select count(1) from `" + tableName + "`";              if (!string.IsNullOrWhiteSpace(sqlCondition))             {                 sql += " where " + sqlCondition;             }              object result = GetSingle(sql);              if (result != null)             {                 return Convert.ToInt32(result);             }             else             {                 return 0;             }         }          /// &lt;summary&gt;         /// 获取记录条数         /// &lt;/summary&gt;         /// &lt;param name="tableName"&gt;表名&lt;/param&gt;         /// &lt;param name="sqlCondition"&gt;查询条件&lt;/param&gt;         /// &lt;returns&gt;&lt;/returns&gt;         public async Task&lt;int&gt; GetCountAsync(string tableName, string sqlCondition)         {             string sql = "select count(1) from `" + tableName + "`";              if (!string.IsNullOrWhiteSpace(sqlCondition))             {                 sql += " where " + sqlCondition;             }              object result = await GetSingleAsync(sql);              if (result != null)             {                 return Convert.ToInt32(result);             }             else             {                 return 0;             }         }          /// &lt;summary&gt;         /// 获取记录条数         /// &lt;/summary&gt;         /// &lt;param name="tableName"&gt;表名&lt;/param&gt;         /// &lt;param name="sqlCondition"&gt;查询条件&lt;/param&gt;         /// &lt;param name="paras"&gt;SQL参数数组&lt;/param&gt;         /// &lt;returns&gt;&lt;/returns&gt;         public int GetCount(string tableName, string sqlCondition, DmParameter[] paras)         {             string sql = "select count(1) from `" + tableName + "`";              if (!string.IsNullOrWhiteSpace(sqlCondition))             {                 sql += " where " + sqlCondition;             }              object result = GetSingle(sql, paras);              if (result != null)             {                 return Convert.ToInt32(result);             }             else             {                 return 0;             }         }          /// &lt;summary&gt;         /// 获取记录条数         /// &lt;/summary&gt;         /// &lt;param name="tableName"&gt;表名&lt;/param&gt;         /// &lt;param name="sqlCondition"&gt;查询条件&lt;/param&gt;         /// &lt;param name="paras"&gt;SQL参数数组&lt;/param&gt;         /// &lt;returns&gt;&lt;/returns&gt;         public async Task&lt;int&gt; GetCountAsync(string tableName, string sqlCondition, DmParameter[] paras)         {             string sql = "select count(1) from `" + tableName + "`";              if (!string.IsNullOrWhiteSpace(sqlCondition))             {                 sql += " where " + sqlCondition;             }              object result = await GetSingleAsync(sql, paras);              if (result != null)             {                 return Convert.ToInt32(result);             }             else             {                 return 0;             }         }          #endregion 通用快捷方法          #region 执行简单SQL语句          /// &lt;summary&gt;         /// 执行SQL语句，返回影响的记录数         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;SQL语句&lt;/param&gt;         /// &lt;returns&gt;影响的记录数&lt;/returns&gt;         public int ExecuteSql(string sql)         {             using (DmConnection connection = new DmConnection(connectionString))             {                 using (DmCommand cmd = new DmCommand(sql, connection))                 {                     connection.Open();                     int rows = cmd.ExecuteNonQuery();                     return rows;                 }             }         }          /// &lt;summary&gt;         /// 执行SQL语句，返回影响的记录数         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;SQL语句&lt;/param&gt;         /// &lt;returns&gt;影响的记录数&lt;/returns&gt;         public async Task&lt;int&gt; ExecuteSqlAsync(string sql)         {             using (DmConnection connection = new DmConnection(connectionString))             {                 using (DmCommand cmd = new DmCommand(sql, connection))                 {                     await connection.OpenAsync();                     int rows = await cmd.ExecuteNonQueryAsync();                     return rows;                 }             }         }          /// &lt;summary&gt;         /// 执行SQL语句，返回影响的记录数（可自定义超时时间）         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;SQL语句&lt;/param&gt;         /// &lt;param name="timeout"&gt;执行超时时间&lt;/param&gt;         /// &lt;returns&gt;影响的记录数&lt;/returns&gt;         public int ExecuteSqlByTime(string sql, int timeout)         {             using (DmConnection connection = new DmConnection(this.connectionString))             {                 using (DmCommand cmd = new DmCommand(sql, connection))                 {                     connection.Open();                     cmd.CommandTimeout = timeout;                     int rows = cmd.ExecuteNonQuery();                     return rows;                 }             }         }          /// &lt;summary&gt;         /// 执行SQL语句，返回影响的记录数（可自定义超时时间）         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;SQL语句&lt;/param&gt;         /// &lt;param name="timeout"&gt;执行超时时间&lt;/param&gt;         /// &lt;returns&gt;影响的记录数&lt;/returns&gt;         public async Task&lt;int&gt; ExecuteSqlByTimeAsync(string sql, int timeout)         {             using (DmConnection connection = new DmConnection(this.connectionString))             {                 using (DmCommand cmd = new DmCommand(sql, connection))                 {                     await connection.OpenAsync();                     cmd.CommandTimeout = timeout;                     int rows = await cmd.ExecuteNonQueryAsync();                     return rows;                 }             }         }          /// &lt;summary&gt;         /// 执行多条SQL语句，实现数据库事务。         /// &lt;/summary&gt;         /// &lt;param name="sqlList"&gt;多条SQL语句&lt;/param&gt;         public void ExecuteSqlTrans(ArrayList sqlList)         {             using (DmConnection conn = new DmConnection(connectionString))             {                 conn.Open();                 using (DbTransaction trans = conn.BeginTransaction())                 {                     using (DmCommand cmd = new DmCommand())                     {                         cmd.Connection = conn;                         cmd.Transaction = trans;                          try                         {                             for (int n = 0; n &lt; sqlList.Count; n++)                             {                                 string sql = sqlList[n].ToString();                                  if (sql.Trim().Length &gt; 1)                                 {                                     cmd.CommandText = sql;                                     cmd.ExecuteNonQuery();                                 }                             }                              trans.Commit();                         }                         catch (DmException ex)                         {                             trans.Rollback();                             throw ex;                         }                     }                 }             }         }          /// &lt;summary&gt;         /// 执行多条SQL语句，实现数据库事务。         /// &lt;/summary&gt;         /// &lt;param name="sqlList"&gt;多条SQL语句&lt;/param&gt;         public async Task ExecuteSqlTransAsync(ArrayList sqlList)         {             using (DmConnection conn = new DmConnection(connectionString))             {                 await conn.OpenAsync();                 using (DbTransaction trans = await conn.BeginTransactionAsync())                 {                     using (DmCommand cmd = new DmCommand())                     {                         cmd.Connection = conn;                         cmd.Transaction = trans;                          try                         {                             for (int n = 0; n &lt; sqlList.Count; n++)                             {                                 string sql = sqlList[n].ToString();                                  if (sql.Trim().Length &gt; 1)                                 {                                     cmd.CommandText = sql;                                     await cmd.ExecuteNonQueryAsync();                                 }                             }                              trans.Commit();                         }                         catch (DmException ex)                         {                             trans.Rollback();                             throw ex;                         }                     }                 }             }         }          /// &lt;summary&gt;         /// 执行一条SQL查询语句，返回查询结果。         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;SQL查询语句&lt;/param&gt;         /// &lt;returns&gt;查询结果&lt;/returns&gt;         public object GetSingle(string sql)         {             using (DmConnection connection = new DmConnection(connectionString))             {                 using (DmCommand cmd = new DmCommand(sql, connection))                 {                     connection.Open();                      object obj = cmd.ExecuteScalar();                      if ((object.Equals(obj, null)) || (object.Equals(obj, DBNull.Value)))                     {                         return null;                     }                     else                     {                         return obj;                     }                 }             }         }          /// &lt;summary&gt;         /// 执行一条SQL查询语句，返回查询结果。         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;SQL查询语句&lt;/param&gt;         /// &lt;returns&gt;查询结果&lt;/returns&gt;         public async Task&lt;object&gt; GetSingleAsync(string sql)         {             using (DmConnection connection = new DmConnection(connectionString))             {                 using (DmCommand cmd = new DmCommand(sql, connection))                 {                     await connection.OpenAsync();                      object obj = await cmd.ExecuteScalarAsync();                      if ((object.Equals(obj, null)) || (object.Equals(obj, DBNull.Value)))                     {                         return null;                     }                     else                     {                         return obj;                     }                 }             }         }          /// &lt;summary&gt;         /// 执行查询语句，返回DbDataReader（切记要手工关闭DbDataReader）         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;查询语句&lt;/param&gt;         /// &lt;returns&gt;DmDataReader&lt;/returns&gt;         public DbDataReader ExecuteReader(string sql)         {             DmConnection connection = new DmConnection(connectionString);             DmCommand cmd = new DmCommand(sql, connection);              connection.Open();             return cmd.ExecuteReader();         }          /// &lt;summary&gt;         /// 执行查询语句，返回DbDataReader（切记要手工关闭DbDataReader）         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;查询语句&lt;/param&gt;         /// &lt;returns&gt;DmDataReader&lt;/returns&gt;         public async Task&lt;DbDataReader&gt; ExecuteReaderAsync(string sql)         {             DmConnection connection = new DmConnection(connectionString);             DmCommand cmd = new DmCommand(sql, connection);              await connection.OpenAsync();             return await cmd.ExecuteReaderAsync();         }          /// &lt;summary&gt;         /// 执行查询语句，返回DataSet         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;查询语句&lt;/param&gt;         /// &lt;returns&gt;DataSet&lt;/returns&gt;         public DataSet Query(string sql)         {             using (DmConnection connection = new DmConnection(connectionString))             {                 using (DmDataAdapter command = new DmDataAdapter(sql, connection))                 {                     DataSet ds = new DataSet();                      connection.Open();                     command.Fill(ds, "ds");                      return ds;                 }             }         }          /// &lt;summary&gt;         /// 执行查询语句，返回DataSet（可自定义超时时间）         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;&lt;/param&gt;         /// &lt;param name="timeout"&gt;&lt;/param&gt;         /// &lt;returns&gt;&lt;/returns&gt;         public DataSet Query(string sql, int timeout)         {             using (DmConnection connection = new DmConnection(connectionString))             {                 using (DmDataAdapter command = new DmDataAdapter(sql, connection))                 {                     DataSet ds = new DataSet();                      connection.Open();                     command.SelectCommand.CommandTimeout = timeout;                     command.Fill(ds, "ds");                      return ds;                 }             }         }         #endregion 执行简单SQL语句          #region 执行带参数的SQL语句          /// &lt;summary&gt;         /// 执行SQL语句，返回影响的记录数         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;SQL语句&lt;/param&gt;         /// &lt;param name="paras"&gt;SQL参数数组&lt;/param&gt;         /// &lt;returns&gt;影响的记录数&lt;/returns&gt;         public int ExecuteSql(string sql, params DmParameter[] paras)         {             using (DmConnection connection = new DmConnection(connectionString))             {                 using (DmCommand cmd = new DmCommand())                 {                     PrepareCommand(cmd, connection, null, sql, paras);                     int rows = cmd.ExecuteNonQuery();                     cmd.Parameters.Clear();                     return rows;                 }             }         }          /// &lt;summary&gt;         /// 执行SQL语句，返回影响的记录数         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;SQL语句&lt;/param&gt;         /// &lt;param name="paras"&gt;SQL参数数组&lt;/param&gt;         /// &lt;returns&gt;影响的记录数&lt;/returns&gt;         public async Task&lt;int&gt; ExecuteSqlAsync(string sql, params DmParameter[] paras)         {             using (DmConnection connection = new DmConnection(connectionString))             {                 using (DmCommand cmd = new DmCommand())                 {                     await PrepareCommandAsync(cmd, connection, null, sql, paras);                     int rows = await cmd.ExecuteNonQueryAsync();                     cmd.Parameters.Clear();                     return rows;                 }             }         }          /// &lt;summary&gt;         /// 执行添加SQL语句，返回记录的ID（自动产生的自增主键）         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;SQL语句&lt;/param&gt;         /// &lt;param name="parms"&gt;SQL参数&lt;/param&gt;         /// &lt;returns&gt;记录的ID&lt;/returns&gt;         public int ExecuteAdd(string sql, params DmParameter[] parms)         {             sql = sql + ";Select @@IDENTITY";              using (DmConnection connection = new DmConnection(connectionString))             {                 using (DmCommand cmd = new DmCommand())                 {                     PrepareCommand(cmd, connection, null, sql, parms);                     int recordID = Int32.Parse(cmd.ExecuteScalar().ToString());                     cmd.Parameters.Clear();                      return recordID;                 }             }         }          /// &lt;summary&gt;         /// 执行添加SQL语句，返回记录的ID（自动产生的自增主键）         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;SQL语句&lt;/param&gt;         /// &lt;param name="parms"&gt;SQL参数&lt;/param&gt;         /// &lt;returns&gt;记录的ID&lt;/returns&gt;         public async Task&lt;int&gt; ExecuteAddAsync(string sql, params DmParameter[] parms)         {             sql = sql + ";select @@identity as newautoid";              using (DmConnection connection = new DmConnection(connectionString))             {                 using (DmCommand cmd = new DmCommand())                 {                     await PrepareCommandAsync(cmd, connection, null, sql, parms);                      int recordID;                     try                     {                         recordID = int.Parse((await cmd.ExecuteScalarAsync()).ToString());                     }                     catch                     {                         recordID = -1;                     }                      cmd.Parameters.Clear();                      return recordID;                 }             }         }          /// &lt;summary&gt;         /// 执行多条SQL语句，实现数据库事务。         /// &lt;/summary&gt;         /// &lt;param name="sqlList"&gt;SQL语句的哈希表（key为sql语句，value是该语句的DmParameter[]）&lt;/param&gt;         public void ExecuteSqlTrans(Hashtable sqlList)         {             using (DmConnection conn = new DmConnection(connectionString))             {                 conn.Open();                 using (DbTransaction trans = conn.BeginTransaction())                 {                     using (DmCommand cmd = new DmCommand())                     {                         try                         {                             foreach (DictionaryEntry entry in sqlList)                             {                                 var sql = entry.Key.ToString();                                 var paras = (DmParameter[])entry.Value;                                  PrepareCommand(cmd, conn, trans, sql, paras);                                  int val = cmd.ExecuteNonQuery();                                  cmd.Parameters.Clear();                             }                              trans.Commit();                         }                         catch (DmException ex)                         {                             trans.Rollback();                             throw ex;                         }                     }                 }             }         }          /// &lt;summary&gt;         /// 执行多条SQL语句，实现数据库事务。         /// &lt;/summary&gt;         /// &lt;param name="sqlList"&gt;SQL语句的哈希表（key为sql语句，value是该语句的DmParameter[]）&lt;/param&gt;         public async Task ExecuteSqlTransAsync(Hashtable sqlList)         {             using (DmConnection conn = new DmConnection(connectionString))             {                 await conn.OpenAsync();                 using (DbTransaction trans = conn.BeginTransaction())                 {                     using (DmCommand cmd = new DmCommand())                     {                         try                         {                             foreach (DictionaryEntry entry in sqlList)                             {                                 var sql = entry.Key.ToString();                                 var paras = (DmParameter[])entry.Value;                                  await PrepareCommandAsync(cmd, conn, trans, sql, paras);                                  int val = await cmd.ExecuteNonQueryAsync();                                  cmd.Parameters.Clear();                             }                              trans.Commit();                         }                         catch (DmException ex)                         {                             trans.Rollback();                             throw ex;                         }                     }                 }             }         }          /// &lt;summary&gt;         /// 执行一条计算查询结果语句，返回查询结果。         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;SQL语句&lt;/param&gt;         /// &lt;param name="parms"&gt;SQL参数&lt;/param&gt;         /// &lt;returns&gt;查询结果&lt;/returns&gt;         public object GetSingle(string sql, params DmParameter[] parms)         {             using (DmConnection conn = new DmConnection(connectionString))             {                 using (DmCommand cmd = new DmCommand())                 {                     PrepareCommand(cmd, conn, null, sql, parms);                      object obj = cmd.ExecuteScalar();                     cmd.Parameters.Clear();                      if ((object.Equals(obj, null)) || (object.Equals(obj, DBNull.Value)))                     {                         return null;                     }                     else                     {                         return obj;                     }                 }             }         }          /// &lt;summary&gt;         /// 执行一条计算查询结果语句，返回查询结果。         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;SQL语句&lt;/param&gt;         /// &lt;param name="parms"&gt;SQL参数&lt;/param&gt;         /// &lt;returns&gt;查询结果&lt;/returns&gt;         public async Task&lt;object&gt; GetSingleAsync(string sql, params DmParameter[] parms)         {             using (DmConnection conn = new DmConnection(connectionString))             {                 using (DmCommand cmd = new DmCommand())                 {                     await PrepareCommandAsync(cmd, conn, null, sql, parms);                      object obj = await cmd.ExecuteScalarAsync();                     cmd.Parameters.Clear();                      if ((object.Equals(obj, null)) || (object.Equals(obj, DBNull.Value)))                     {                         return null;                     }                     else                     {                         return obj;                     }                 }             }         }          /// &lt;summary&gt;         /// 执行查询语句，返回DmDataReader (切记要手工关闭DmDataReader)         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;查询语句&lt;/param&gt;         /// &lt;param name="parms"&gt;SQL参数&lt;/param&gt;         /// &lt;returns&gt;DmDataReader&lt;/returns&gt;         public DbDataReader ExecuteReader(string sql, params DmParameter[] parms)         {             DmConnection connection = new DmConnection(connectionString);             DmCommand cmd = new DmCommand();              PrepareCommand(cmd, connection, null, sql, parms);              DbDataReader myReader = cmd.ExecuteReader();             cmd.Parameters.Clear();              return myReader;         }          /// &lt;summary&gt;         /// 执行查询语句，返回DmDataReader (切记要手工关闭DmDataReader)         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;查询语句&lt;/param&gt;         /// &lt;param name="parms"&gt;SQL参数&lt;/param&gt;         /// &lt;returns&gt;DmDataReader&lt;/returns&gt;         public async Task&lt;DbDataReader&gt; ExecuteReaderAsync(string sql, params DmParameter[] parms)         {             DmConnection connection = new DmConnection(connectionString);             DmCommand cmd = new DmCommand();              await PrepareCommandAsync(cmd, connection, null, sql, parms);              var myReader = await cmd.ExecuteReaderAsync();             cmd.Parameters.Clear();             return myReader;         }          /// &lt;summary&gt;         /// 执行查询语句，返回DataSet         /// &lt;/summary&gt;         /// &lt;param name="sql"&gt;查询语句&lt;/param&gt;         /// &lt;param name="paras"&gt;参数数组&lt;/param&gt;         /// &lt;returns&gt;DataSet&lt;/returns&gt;         public DataSet Query(string sql, params DmParameter[] paras)         {             using (DmConnection connection = new DmConnection(connectionString))             {                 using (DmCommand cmd = new DmCommand())                 {                     PrepareCommand(cmd, connection, null, sql, paras);                     DataSet ds = new DataSet();                      using (DmDataAdapter da = new DmDataAdapter(cmd))                     {                         da.Fill(ds, "ds");                         cmd.Parameters.Clear();                          return ds;                     }                 }             }         }          /// &lt;summary&gt;         /// 准备SQL查询命令         /// &lt;/summary&gt;         /// &lt;param name="cmd"&gt;SQL命令对象&lt;/param&gt;         /// &lt;param name="conn"&gt;SQL连接对象&lt;/param&gt;         /// &lt;param name="trans"&gt;SQL事务对象&lt;/param&gt;         /// &lt;param name="cmdText"&gt;SQL语句&lt;/param&gt;         /// &lt;param name="paras"&gt;SQL参数数组&lt;/param&gt;         private void PrepareCommand(DmCommand cmd, DmConnection conn, DbTransaction trans, string cmdText, DmParameter[] paras)         {             if (conn.State != ConnectionState.Open)             {                 conn.Open();             }              cmd.Connection = conn;             cmd.CommandText = cmdText;              if (trans != null)             {                 cmd.Transaction = trans;             }              cmd.CommandType = CommandType.Text;             if (paras != null)             {                 foreach (DmParameter parameter in paras)                 {                     if ((parameter.Direction == ParameterDirection.InputOutput || parameter.Direction == ParameterDirection.Input) &amp;&amp;                         (parameter.Value == null))                     {                         parameter.Value = DBNull.Value;                     }                     cmd.Parameters.Add(parameter);                 }             }         }          /// &lt;summary&gt;         /// 准备SQL查询命令         /// &lt;/summary&gt;         /// &lt;param name="cmd"&gt;SQL命令对象&lt;/param&gt;         /// &lt;param name="conn"&gt;SQL连接对象&lt;/param&gt;         /// &lt;param name="trans"&gt;SQL事务对象&lt;/param&gt;         /// &lt;param name="cmdText"&gt;SQL语句&lt;/param&gt;         /// &lt;param name="paras"&gt;SQL参数数组&lt;/param&gt;         private async Task PrepareCommandAsync(DmCommand cmd, DmConnection conn, DbTransaction trans, string cmdText, DmParameter[] paras)         {             if (conn.State != ConnectionState.Open)             {                 await conn.OpenAsync();             }              cmd.Connection = conn;             cmd.CommandText = cmdText;              if (trans != null)             {                 cmd.Transaction = trans;             }              cmd.CommandType = CommandType.Text;             if (paras != null)             {                 foreach (DmParameter parameter in paras)                 {                     if ((parameter.Direction == ParameterDirection.InputOutput || parameter.Direction == ParameterDirection.Input) &amp;&amp;                         (parameter.Value == null))                     {                         parameter.Value = DBNull.Value;                     }                     cmd.Parameters.Add(parameter);                 }             }         }          #endregion 执行带参数的SQL语句     }</code></pre> <p>使用方法也很简单，传入SQL语句和参数即可。这里给出几个增删改查的例子：</p> <pre><code>    public class PersonAdoNetDAL : IPersonDAL     {         static readonly DmDbClient _client = new DmDbClient("Server=127.0.0.1; UserId=TESTDB; PWD=1234567");          public int Add(PersonModel model)         {             string sql = "insert into Person(Name,City) Values(:Name,:City)";             DmParameter[] paras = new DmParameter[] {                 new DmParameter(":Name",model.Name),                 new DmParameter(":City",model.City)             };              return _client.ExecuteAdd(sql, paras);         }          public bool Update(PersonModel model)         {             string sql = "update Person set City=:City where Id=:Id";             DmParameter[] paras = new DmParameter[] {                 new DmParameter(":Id",model.Id),                 new DmParameter(":City",model.City)             };              return _client.ExecuteSql(sql, paras) &gt; 0 ? true : false;         }          public bool Delete(int id)         {             string sql = "delete from Person where Id=:Id";             DmParameter[] paras = new DmParameter[] {                 new DmParameter(":Id",id),             };              return _client.ExecuteSql(sql, paras) &gt; 0 ? true : false;         }          public PersonModel Get(int id)         {             string sql = "select Id,Name,City from Person where Id=:Id";             DmParameter[] paras = new DmParameter[] {                 new DmParameter(":Id",id),             };              PersonModel model = null;             using (var reader = (DmDataReader)_client.ExecuteReader(sql, paras))             {                 while (reader.Read())                 {                     model = new PersonModel();                     model.Id = reader.GetInt32(0);                     model.Name = reader.GetString(1);                     model.City = reader.GetString(2);                 }             }              return model;         }          public List&lt;PersonModel&gt; GetList()         {             var list = new List&lt;PersonModel&gt;();             using (var reader = (DmDataReader)_client.ExecuteReader("select Id,Name,City from Person"))             {                 while (reader.Read())                 {                     var model = new PersonModel();                     model.Id = reader.GetInt32(0);                     model.Name = reader.GetString(1);                     model.City = reader.GetString(2);                     list.Add(model);                 }             }              return list;         }      }</code></pre> <p>需要注意达梦数据库的参数是用冒号作为前缀的。另外数据表和字段的名字建议全部使用大写字母，单词之间使用下划线分隔，也就是蛇形命名法。此时SQL语句就不用关心大小写了，怎么写都行。</p> <h2 id="dapper方式">Dapper方式</h2> <p>Dapper是一个轻量级的ORM框架，现在使用的也很广泛，可以简化代码编写。因为Dapper扩展的IDbConnection，这是ADO.NET中的东西，我们使用的DmProvider也是实现了ADO.NET相关接口，所以Dapper可以通过DmProvider操作达梦数据库。</p> <p>首先定义一个获取数据库连接对象的工厂类：</p> <pre><code class="language-cs">    public class DmConnectionFactory     {         static string sqlConnString = "Server=127.0.0.1; UserId=TESTDB; PWD=123456";         public static IDbConnection GetConn()         {             return new DmConnection(sqlConnString);         }     }</code></pre> <p>然后就可以使用它执行SQL语句了：</p> <pre><code class="language-cs">   public class PersonDapperDAL : IPersonDAL     {         public PersonDapperDAL()         {         }          public PersonModel Get(int id)         {             string sql = "select Id,Name,City from Person where Id=:Id";             return DmConnectionFactory.GetConn().QueryFirstOrDefault&lt;PersonModel&gt;(sql, new { Id = id });         }          public List&lt;PersonModel&gt; GetList()         {             string sql = "select Id,Name,City from Person";             return DmConnectionFactory.GetConn().Query&lt;PersonModel&gt;(sql).ToList();         }          public int Add(PersonModel model)         {             string sql = "insert into Person(Name,City) Values(:Name,:City);Select @@IDENTITY";             return DmConnectionFactory.GetConn().QuerySingle&lt;int&gt;(sql, model);         }          public bool Update(PersonModel model)         {             string sql = "update Person set City=:City where Id=:Id";             int result = DmConnectionFactory.GetConn().Execute(sql, model);             return result &gt; 0;         }          public bool Delete(int id)         {             string sql = "delete from Person where Id=:Id";             int result = DmConnectionFactory.GetConn().Execute(sql, new { Id = id });             return result &gt; 0;         }     }</code></pre> <p>Query、Execute这些方法都是Dapper定义的，可以看到能够少写很多代码。这里也不用打开连接、关闭连接，也不用写using，因为Dapper的这些方法中已经做了相关处理。</p> <hr/> <p>好了，以上就是本文的主要内容。如有错漏欢迎指正。</p> 			                </div>
                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-105402.htm">vue妙用ref父组件访问子组件中的值和调用子组件的方法</a></p>
                                        <p>下一个：<a href="/news/article-106226.htm">大成路宠爱国际动物医院电话号码是多少（宠爱国际动物医院科怡路店电话）</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-97022.htm" title="开宠物食品店赚钱吗 开宠物食品店赚钱吗现在">开宠物食品店赚钱吗 开宠物食品店赚钱吗现在</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-4-25-free-clash-subscribe.htm" title="4月25日最新Clash-X订阅 | 21.6M/S|2025年SSR/Shadowrocket/V2ray/Clash免费节点地址链接分享">4月25日最新Clash-X订阅 | 21.6M/S|2025年SSR/Shadowrocket/V2ray/Clash免费节点地址链接分享</a></li>
                        <li class="py-2"><a href="/news/article-93335.htm" title="动物疫苗规定最新消息 动物疫苗规定最新消息查询">动物疫苗规定最新消息 动物疫苗规定最新消息查询</a></li>
                        <li class="py-2"><a href="/news/article-73561.htm" title="使用aspnetcore前后端分离开发，你一定要知道这个">使用aspnetcore前后端分离开发，你一定要知道这个</a></li>
                        <li class="py-2"><a href="/news/article-75582.htm" title="宠物领养协议书怎么生效的 宠物领养协议书怎么生效的呢">宠物领养协议书怎么生效的 宠物领养协议书怎么生效的呢</a></li>
                        <li class="py-2"><a href="/news/article-94275.htm" title="中国农大动物医院电话是多少啊（中国农业大学动物医院排班表）">中国农大动物医院电话是多少啊（中国农业大学动物医院排班表）</a></li>
                        <li class="py-2"><a href="/news/article-102215.htm" title="青岛哪里卖宠物猫（青岛哪里买猫）">青岛哪里卖宠物猫（青岛哪里买猫）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-4-23-clash-windows.htm" title="4月23日最新Clash-X订阅 | 20.1M/S|2025年V2ray/Shadowrocket/SSR/Clash免费节点地址链接分享">4月23日最新Clash-X订阅 | 20.1M/S|2025年V2ray/Shadowrocket/SSR/Clash免费节点地址链接分享</a></li>
                        <li class="py-2"><a href="/news/article-100056.htm" title="天津宠物领养救助中心在哪（天津宠物救助中心电话）">天津宠物领养救助中心在哪（天津宠物救助中心电话）</a></li>
                        <li class="py-2"><a href="/news/article-102216.htm" title="领养孩子评估回访（收养回访工作实施方案）">领养孩子评估回访（收养回访工作实施方案）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">85</span> <a href="/date/2025-04/" title="2025-04 归档">2025-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">88</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </section>
        <!--latest Choose Us end-->
        
        
    </main>
        <!-- Footer area start -->
    <footer>
        <section class="footer__area-common background overflow-hidden position-relative z-1">
            <div class="footer__bottom-wrapper footer__bottom-home-1-bg">
                <div class="container">
                    <div class="footer__bottom">
                        <div class="footer__copyright">
                                                <p>
                                                <a href="/">首页</a> |
                                                <a href="/free-nodes/">免费节点</a> |
                                                <a href="/paid-subscribe/">推荐机场</a> |
                                                <a href="/client.htm">客户端</a> |
                                                <a href="/news/">新闻资讯</a> |
                                                <a href="/about-us.htm">关于我们</a> |
                        <a href="/disclaimer.htm">免责申明</a> |
                        <a href="/privacy.htm">隐私申明</a> |
                        <a href="/sitemap.xml">网站地图</a>
                    </p>
                            <p>
                                <a href="/">Clash-X V2ray免费订阅地址官网</a> 版权所有 Powered by WordPress
                            </p>
                        </div>
                        <div class="footer__copyright-menu">
                            <ul>
                                <li><a href="about-us.html">Privacy & Terms Condition</a></li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    </footer>
    <!-- Footer area end -->
    <!-- JS here -->
    <script src="/assets/website/js/frontend/clashxv2ray/jquery-3.6.0.min.js"></script>
    <script src="/assets/website/js/frontend/clashxv2ray/waypoints.min.js"></script>
    <script src="/assets/website/js/frontend/clashxv2ray/bootstrap.bundle.min.js"></script>
    <script src="/assets/website/js/frontend/clashxv2ray/meanmenu.min.js"></script>
    <script src="/assets/website/js/frontend/clashxv2ray/swiper.min.js"></script>
    <script src="/assets/website/js/frontend/clashxv2ray/wow.js"></script>
    <script src="/assets/website/js/frontend/clashxv2ray/magnific-popup.min.js"></script>
    <script src="/assets/website/js/frontend/clashxv2ray/type.js"></script>
    <script src="/assets/website/js/frontend/clashxv2ray/counterup.js"></script>
    <script src="/assets/website/js/frontend/clashxv2ray/nice-select.min.js"></script>
    <script src="/assets/website/js/frontend/clashxv2ray/jquery-ui.min.js"></script>
    <script src="/assets/website/js/frontend/clashxv2ray/parallax-scroll.js"></script>
    <script src="/assets/website/js/frontend/clashxv2ray/jquery.countdown.min.js"></script>
    <script src="/assets/website/js/frontend/clashxv2ray/isotope-docs.min.js"></script>
    <script src="/assets/website/js/frontend/clashxv2ray/ajax-form.js"></script>
    <script src="/assets/website/js/frontend/clashxv2ray/slick.min.js"></script>
    <script src="/assets/website/js/frontend/clashxv2ray/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>